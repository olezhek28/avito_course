// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package event_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventServiceV1Client is the client API for EventServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventServiceV1Client interface {
	// Создает новое событие
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Обновляет событие по идентификатору
	UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Удаляет событие по идентификатору
	DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Возвращает список всех существующих событий за день
	GetEventListForDay(ctx context.Context, in *GetEventListForDayRequest, opts ...grpc.CallOption) (*GetEventListForDayResponse, error)
	// Возвращает список всех существующих событий за неделю
	GetEventListForWeek(ctx context.Context, in *GetEventListForWeekRequest, opts ...grpc.CallOption) (*GetEventListForWeekResponse, error)
	// Возвращает список всех существующих событий за месяц
	GetEventListForMonth(ctx context.Context, in *GetEventListForMonthRequest, opts ...grpc.CallOption) (*GetEventListForMonthResponse, error)
}

type eventServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceV1Client(cc grpc.ClientConnInterface) EventServiceV1Client {
	return &eventServiceV1Client{cc}
}

func (c *eventServiceV1Client) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/event.EventServiceV1/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceV1Client) UpdateEvent(ctx context.Context, in *UpdateEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/event.EventServiceV1/UpdateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceV1Client) DeleteEvent(ctx context.Context, in *DeleteEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/event.EventServiceV1/DeleteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceV1Client) GetEventListForDay(ctx context.Context, in *GetEventListForDayRequest, opts ...grpc.CallOption) (*GetEventListForDayResponse, error) {
	out := new(GetEventListForDayResponse)
	err := c.cc.Invoke(ctx, "/event.EventServiceV1/GetEventListForDay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceV1Client) GetEventListForWeek(ctx context.Context, in *GetEventListForWeekRequest, opts ...grpc.CallOption) (*GetEventListForWeekResponse, error) {
	out := new(GetEventListForWeekResponse)
	err := c.cc.Invoke(ctx, "/event.EventServiceV1/GetEventListForWeek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceV1Client) GetEventListForMonth(ctx context.Context, in *GetEventListForMonthRequest, opts ...grpc.CallOption) (*GetEventListForMonthResponse, error) {
	out := new(GetEventListForMonthResponse)
	err := c.cc.Invoke(ctx, "/event.EventServiceV1/GetEventListForMonth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceV1Server is the server API for EventServiceV1 service.
// All implementations must embed UnimplementedEventServiceV1Server
// for forward compatibility
type EventServiceV1Server interface {
	// Создает новое событие
	CreateEvent(context.Context, *CreateEventRequest) (*emptypb.Empty, error)
	// Обновляет событие по идентификатору
	UpdateEvent(context.Context, *UpdateEventRequest) (*emptypb.Empty, error)
	// Удаляет событие по идентификатору
	DeleteEvent(context.Context, *DeleteEventRequest) (*emptypb.Empty, error)
	// Возвращает список всех существующих событий за день
	GetEventListForDay(context.Context, *GetEventListForDayRequest) (*GetEventListForDayResponse, error)
	// Возвращает список всех существующих событий за неделю
	GetEventListForWeek(context.Context, *GetEventListForWeekRequest) (*GetEventListForWeekResponse, error)
	// Возвращает список всех существующих событий за месяц
	GetEventListForMonth(context.Context, *GetEventListForMonthRequest) (*GetEventListForMonthResponse, error)
	mustEmbedUnimplementedEventServiceV1Server()
}

// UnimplementedEventServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedEventServiceV1Server struct {
}

func (UnimplementedEventServiceV1Server) CreateEvent(context.Context, *CreateEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedEventServiceV1Server) UpdateEvent(context.Context, *UpdateEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (UnimplementedEventServiceV1Server) DeleteEvent(context.Context, *DeleteEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (UnimplementedEventServiceV1Server) GetEventListForDay(context.Context, *GetEventListForDayRequest) (*GetEventListForDayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventListForDay not implemented")
}
func (UnimplementedEventServiceV1Server) GetEventListForWeek(context.Context, *GetEventListForWeekRequest) (*GetEventListForWeekResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventListForWeek not implemented")
}
func (UnimplementedEventServiceV1Server) GetEventListForMonth(context.Context, *GetEventListForMonthRequest) (*GetEventListForMonthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventListForMonth not implemented")
}
func (UnimplementedEventServiceV1Server) mustEmbedUnimplementedEventServiceV1Server() {}

// UnsafeEventServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventServiceV1Server will
// result in compilation errors.
type UnsafeEventServiceV1Server interface {
	mustEmbedUnimplementedEventServiceV1Server()
}

func RegisterEventServiceV1Server(s grpc.ServiceRegistrar, srv EventServiceV1Server) {
	s.RegisterService(&EventServiceV1_ServiceDesc, srv)
}

func _EventServiceV1_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceV1Server).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventServiceV1/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceV1Server).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventServiceV1_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceV1Server).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventServiceV1/UpdateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceV1Server).UpdateEvent(ctx, req.(*UpdateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventServiceV1_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceV1Server).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventServiceV1/DeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceV1Server).DeleteEvent(ctx, req.(*DeleteEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventServiceV1_GetEventListForDay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventListForDayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceV1Server).GetEventListForDay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventServiceV1/GetEventListForDay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceV1Server).GetEventListForDay(ctx, req.(*GetEventListForDayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventServiceV1_GetEventListForWeek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventListForWeekRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceV1Server).GetEventListForWeek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventServiceV1/GetEventListForWeek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceV1Server).GetEventListForWeek(ctx, req.(*GetEventListForWeekRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventServiceV1_GetEventListForMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventListForMonthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceV1Server).GetEventListForMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventServiceV1/GetEventListForMonth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceV1Server).GetEventListForMonth(ctx, req.(*GetEventListForMonthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventServiceV1_ServiceDesc is the grpc.ServiceDesc for EventServiceV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventServiceV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "event.EventServiceV1",
	HandlerType: (*EventServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvent",
			Handler:    _EventServiceV1_CreateEvent_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _EventServiceV1_UpdateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _EventServiceV1_DeleteEvent_Handler,
		},
		{
			MethodName: "GetEventListForDay",
			Handler:    _EventServiceV1_GetEventListForDay_Handler,
		},
		{
			MethodName: "GetEventListForWeek",
			Handler:    _EventServiceV1_GetEventListForWeek_Handler,
		},
		{
			MethodName: "GetEventListForMonth",
			Handler:    _EventServiceV1_GetEventListForMonth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
